type User {
  _id: ID!
  firstName: String!
  lastName: String!
  userName: String!
  email: String!
  password: String!
  recipes: [Recipe]!
  favoriteRecipes: [Recipe]!
  locale: String!
}

input UserCreateInput {
  firstName: String!
  lastName: String!
  userName: String!
  email: String!
  password: String!
}

input UserEditInput {
  firstName: String
  lastName: String
  password: String
  locale: String
}

input UserLoginInput {
  userNameOrEmail: String!
  password: String!
}

type AuthPayload {
  token: String!
  user: User!
}

type Query {
  getUserById(id: ID!): User!
  getAllUser: [User]!
}

type Mutation {
  loginUser(userLoginInput: UserLoginInput!): AuthPayload!
  createUser(userCreateInput: UserCreateInput): User!
  editUser(id: ID!, userEditInput: UserEditInput!): User!
  deleteUser(id: ID!): Boolean!
  deleteAllUser: Int!
}
