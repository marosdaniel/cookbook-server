type Ingredient {
  _id: ID!
  localId: String!
  name: String!
  quantity: Float!
  unit: String!
}

input IngredientInput {
  localId: String!
  name: String!
  quantity: Float!
  unit: String!
}

type PreparationStep {
  _id: ID!
  description: String!
  order: Int!
}

input PreparationStepInput {
  description: String!
  order: Int!
}

type Category {
  _id: ID!
  name: String!
  key: String!
  label: String!
  type: String!
}

input CategoryInput {
  name: String!
  key: String!
  label: String!
  type: String!
}

type Label {
  _id: ID!
  name: String!
  key: String!
  label: String!
  type: String!
}

input LabelInput {
  name: String!
  key: String!
  label: String!
  type: String!
}

type DifficultyLevel {
  _id: ID!
  name: String!
  key: String!
  label: String!
  type: String!
}

input DifficultyLevelInput {
  name: String!
  key: String!
  label: String!
  type: String!
}

type Recipe {
  _id: ID!
  title: String!
  description: String
  ingredients: [Ingredient]!
  category: Category!
  labels: [Label]!
  preparationSteps: [PreparationStep]!
  createdAt: DateTime!
  updatedAt: DateTime!
  createdBy: String!
  author: User!
  imgSrc: String
  cookingTime: Int!
  difficultyLevel: DifficultyLevel!
  servings: Int!
  youtubeLink: String
}

input RecipeCreateInput {
  title: String!
  description: String
  ingredients: [IngredientInput]!
  preparationSteps: [PreparationStepInput]!
  category: CategoryInput!
  labels: [LabelInput]!
  imgSrc: String
  cookingTime: Int!
  difficultyLevel: DifficultyLevelInput!
  servings: Int!
  youtubeLink: String
}

input RecipeEditInput {
  title: String
  description: String
  ingredients: [IngredientInput]
  preparationSteps: [PreparationStepInput]!
  category: CategoryInput!
  labels: [LabelInput]!
  imgSrc: String
  cookingTime: Int!
  difficultyLevel: DifficultyLevelInput!
  servings: Int!
  youtubeLink: String
}

type RecipeData {
  recipes: [Recipe]!
  totalRecipes: Int!
}

type Query {
  getRecipeById(_id: ID!): Recipe!
  getRecipes(limit: Int): RecipeData!
  getRecipesByTitle(title: String!, limit: Int): RecipeData!
  getRecipesByUserName(userName: String!, limit: Int): RecipeData!
  getRecipesByUserId(userId: ID!, limit: Int): RecipeData!
}

type Mutation {
  createRecipe(recipeCreateInput: RecipeCreateInput): Recipe!
  editRecipe(id: ID!, recipeEditInput: RecipeEditInput): Recipe!
  deleteRecipe(id: ID!): Boolean! # true if  something was deleted, false if the id was not found or deleted
  deleteAllRecipes: Int! # number of deleted recipes
}
